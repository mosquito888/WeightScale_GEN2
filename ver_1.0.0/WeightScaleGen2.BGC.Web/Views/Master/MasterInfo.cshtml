@using WeightScaleGen2.BGC.Web.Common;
@model WeightScaleGen2.BGC.Models.ViewModels.Master.ResultGetMasterInfoViewModel;
@{
    ViewData["PageTitle"] = @ViewBag.MenuName;
}
@Html.AntiForgeryToken()
<div class="flex flex-row items-center justify-between mb-4">
    @if (Model.mode == Constants.Mode.Created)
    {
        <h3 class="text-black">Add Master</h3>
    }
    else
    {
        <h3 class="text-black">Edit Master Info - @Model.master_code </h3>
    }
    <div>
    <button type="button" onclick="GoToIndex();" class="text-white bg-purple-700 hover:bg-purple-800 focus:ring-4 focus:outline-none focus:ring-purple-300 font-medium rounded-lg text-sm p-2.5 text-center inline-flex items-center me-2 dark:bg-purple-600 dark:hover:bg-purple-700 dark:focus:ring-purple-800">
        <lord-icon src="https://cdn.lordicon.com/jzzzcrxv.json" trigger="hover" stroke="bold" colors="primary:#ffffff,secondary:#ffffff" style="width:20px;height:20px" class="mr-2"></lord-icon>
        กลับ
    </button>
    </div>
</div>
<form id="formModal" class="needs-validation" novalidate>
    @Html.HiddenFor(x => x.mode, new { @id = "mode" })
    <div class="grid gap-4 mb-4 grid-cols-2">
        <div class="col-span-2">
            @if (Model.mode == Constants.Mode.Created)
            {
                <label for="master_code">Master Code</label>
                @Html.TextBoxFor(x => x.master_code, new { @class = "border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500", @id = "master_code", @maxlength = "50", @required = true })
            }
            else
            {
                <label for="master_code">Master Code</label>
                @Html.TextBoxFor(x => x.master_code, new { @class = "border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500", @id = "master_code", @maxlength = "50", @required = true, @readonly = true })
            }
        </div>
        <div class="col-span-2">
            @if (Model.mode == Constants.Mode.Created)
            {
                <label for="master_type">Master Type</label>
                @Html.DropDownListFor(x => x.master_type, SelectListMethods.GetMasterType(), Constants.SelectOption.SelectOne,
                         new
                         {
                             @class = "border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500",
                             @id = "master_type",
                             @required = true
                         })
            }
            else
            {
                <label for="master_type">Master Type</label>
                @Html.TextBoxFor(x => x.master_type, new { @class = "border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500", @id = "master_type", @maxlength = "50", @required = true, @readonly = true })
            }
        </div>
        <div class="col-span-2">
            <label for="master_value1">Master Value</label>
            @Html.TextBoxFor(x => x.master_value1, new { @class = "border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500", @id = "master_value1", @maxlength = "50", @required = true })
        </div>
        <div class="col-span-2">
            <label for="master_desc_th">Master Desc.</label>
            @Html.TextAreaFor(x => x.master_desc_th, new { @class = "border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500", @maxlength = "50", @id = "master_desc_th" })
        </div>
    </div>
    <div class="flex flex-row items-center justify-center mt-4">
        @if (Model.mode == Constants.Mode.Created)
        {
            <button type="button" id="btnRealSave" onclick="Save();" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 mr-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">เพิ่ม</button>
        }
        else
        {
            <button type="button" id="btnRealSave" onclick="Save();" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 mr-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">บันทึก</button>
        }
    </div>
</form>

<script>

    function Save() {
        var validFormMain = ValidateFormMain();
        if (validFormMain) {
            RealSave();
        }
    }

    function ValidateFormMain() {
        if (!$('#formModal')[0].checkValidity()) {
            document.getElementsByClassName('needs-validation').formModal.classList.add('was-validated');
            Swal.fire({
                title: 'คำเตือน',
                text: 'กรุณากรอกข้อมูลให้ครบถ้วน !',
                icon: 'error',
                showCancelButton: false,
                confirmButtonColor: '#3085d6',
                confirmButtonText: 'ตกลง',
                confirmButtonClass: 'd-none d-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                buttonsStyling: false,
            })
            return false;
        } else {
            return true;
        }
    }

    function RealSave() {
        var formData = $('#formModal').serialize();
        Swal.fire({
            title: 'ยืนยันการบันทึกข้อมูล ?',
            text: '',
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'ยืนยัน',
            cancelButtonText: 'ยกเลิก',
            confirmButtonClass: 'd-none d-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
            cancelButtonClass: 'd-none d-sm-inline-block btn btn-sm btn-outline-danger shadow-sm ml-1',
            buttonsStyling: false,
        }).then(function (result) {
            if (result.value) {
                $.ajax({
                    cache: false,
                    async: true,
                    type: "POST",
                    url: '@Url.Action("SaveItem", "Master")',
                    data: formData,
                    success: function (data) {
                        if (data.status == '@Constants.Result.Success') {
                            var timerInterval
                            Swal.fire({
                                title: 'บันทึกสำเร็จ !',
                                html: 'I will close in <strong></strong> seconds.',
                                timer: 750,
                                icon: "success",
                                showCancelButton: false, // There won't be any cancel button
                                showConfirmButton: false, // There won't be any confirm button
                                buttonsStyling: false,
                                onBeforeOpen: function () {
                                    Swal.showLoading()
                                    timerInterval = setInterval(function () {
                                        Swal.getContent().querySelector('strong')
                                            .textContent = Swal.getTimerLeft()
                                    }, 100)
                                },
                                onClose: function () {
                                    clearInterval(timerInterval)
                                }
                            }).then(function (result) {
                                if (
                                    // Read more about handling dismissals
                                    result.dismiss === Swal.DismissReason.timer
                                ) {
                                    console.log('หน้าต่างจะปิดในเวลา')
                                    GoToIndex();
                                }
                            })
                        } else if (data.status == '@Constants.Result.Invalid') {
                            Swal.fire({
                                icon: 'error',
                                title: 'คำเตือน',
                                text: data.message,
                                showCancelButton: false,
                                confirmButtonColor: '#3085d6',
                                confirmButtonText: 'ตกลง',
                                confirmButtonClass: 'd-none d-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                                buttonsStyling: false,
                            })
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'คำเตือน',
                                text: data.message,
                                showCancelButton: false,
                                confirmButtonColor: '#3085d6',
                                confirmButtonText: 'ตกลง',
                                confirmButtonClass: 'd-none d-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                                buttonsStyling: false,
                            })
                            toastr['error']('Fail - ' + data.message, 'Warning!', ErrOpt);
                        }
                    },
                    error: function (err) {
                        toastr['error']('Fail', 'Warning!', ErrOpt);
                    },
                    complete: function (data) {
                    }
                });
            }
        })
    }

    function GoToIndex() {
        window.location.href = '@Url.Action("Index", "Master")';
    }
</script>