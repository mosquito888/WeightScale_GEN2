@using WeightScaleGen2.BGC.Web.Common;
@model WeightScaleGen2.BGC.Models.ViewModels.WeightIn.ResultGetWeightInInfoViewModel;
@{
    ViewData["PageTitle"] = @ViewBag.MenuName;
}
@Html.AntiForgeryToken()
<div class="h-100">
    @* Header Section *@
    <div class="pageMenuTitle">
        @if (Model.mode == Constants.Mode.Created)
        {
            <h3 class="text-black">ชั่งเข้า</h3>
        }
        else
        {
            <h3 class="text-black">ข้อมูลชั่งเข้า<br />: @Model.weight_in_no</h3>
        }
    </div>

    <div id="dataContainerHeight" class="dataContainer weightStampInfo">

        <div class="flex flex-row items-center justify-start mb-3">
            <div>
                <button type="button" onclick="GoToIndex();" class="buttonAction primary-bg inline-flex items-center mr-3">
                    <lord-icon src="https://cdn.lordicon.com/jzzzcrxv.json" trigger="hover" stroke="bold" colors="primary:#ffffff,secondary:#ffffff" style="width:20px;height:20px" class="mr-2"></lord-icon>
                    กลับ
                </button>
            </div>
            @if (Model.mode == Constants.Mode.Created)
            {
                <h4 class="dataTitle">ชั่งเข้า</h4>
            }
            else
            {
                <h4 class="dataTitle">ข้อมูลชั่งเข้า<br />: @Model.weight_in_no</h4>
            }
        </div>

        <form id="formMainWH" class="needs-validation" novalidate>
            @Html.HiddenFor(x => x.mode, new { @id = "mode" })
            @Html.HiddenFor(x => x.id, new { @id = "id" })
            @Html.HiddenFor(x => x.weight_in_no, new { @id = "weight_in_no" })
            @Html.HiddenFor(x => x.status, new { @id = "status" })
            <div class="grid grid-cols-1 md:grid-cols-3 gap-2 rounded-md shadow-sm p-4 mb-4">
                <div class="grid gap-2 grid-col-1 md:grid-cols-12 md:col-start-1 md:col-end-4 rounded-lg shadow-sm p-4">
                    <div class="col-span-12 md:col-span-4">
                        <label for="weight_in_no" class="d-block mb-2">เลขที่ใบชั่งเข้า</label>
                        @Html.TextBoxFor(x => x.weight_in_no, new { @class = "border text-gray-900 block w-full p-2.5", @id = "weight_in_no", @maxlength = "50", @required = true, @disabled = "disabled", @readonly = true })
                    </div>
                    <div class="col-span-12 md:col-span-6">
                        <label for="document_po" class="d-block mb-2">เลขที่ PO</label>
                        @Html.TextBoxFor(x => x.document_po, new { @class = "border text-gray-900 block w-full p-2.5", @id = "document_po", @maxlength = "50" })
                    </div>
                    <div class="col-span-12 md:col-span-2 mt-auto">
                        <button type="button" onclick="CheckDocumentPO();" class="buttonAction w-100 primary-bg inline-flex justify-content-center items-center rounded-sm" style="height: 43px;">
                            <i class="fa-solid fa-search me-2"></i>
                            ค้นหา
                        </button>
                    </div>
                </div>

                <div class="col-span-1">
                    <label for="line_number" class="d-block mb-2">Line Number</label>
                    @Html.TextBoxFor(x => x.line_number, new { @class = "border text-gray-900 block w-full p-2.5", @id = "line_number", @maxlength = "50", @value = "0", @required = true })
                </div>
                <div class="col-span-1">
                    <label for="document_ref" class="d-block mb-2">เลขที่เอกสาร</label>
                    @Html.TextBoxFor(x => x.document_ref, new { @class = "border text-gray-900 block w-full p-2.5", @id = "document_ref", @maxlength = "50" })
                </div>
                @if (Model.mode == Constants.Mode.Created)
                {
                    <div class="col-span-1">
                        <label for="car_type" class="d-block mb-2">ประเภทรถ</label>
                        @Html.DropDownListFor(x => x.car_type, SelectListMethods.GetCarType(), Constants.SelectOption.SelectOne,
                        new
                        {
                            @class = "bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 select2",
                            @id = "car_type",
                            @required = true
                        })
                </div>
                                }
                else
                {
                    <div class="col-span-1">
                        <label for="car_type" class="d-block mb-2">ประเภทรถ</label>
                        @Html.DropDownListFor(x => x.car_type, SelectListMethods.GetCarType(Model.car_type), Constants.SelectOption.SelectOne,
                        new
                        {
                            @class = "bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500",
                            @id = "car_type",
                            @required = true
                        })
                </div>
                                }
                <div class="col-span-1">
                    <label for="weight_in" class="d-block mb-2">น้ำหนัก</label>
                    @Html.TextBoxFor(x => x.weight_in, new { @class = "border text-gray-900 block w-full p-2.5", @id = "weight_in", @maxlength = "50", @required = true, @disabled = "disabled", @readonly = true })
                </div>
                <div class="col-span-1">
                    <label for="doc_type_po" class="d-block mb-2">Line No.</label>
                    @Html.TextBoxFor(x => x.doc_type_po, new { @class = "border text-gray-900 block w-full p-2.5", @id = "doc_type_po" })
                </div>
                <div class="col-span-1">
                    <label for="car_license" class="d-block mb-2">ทะเบียนรถ</label>
                    @Html.TextBoxFor(x => x.car_license, new { @class = "border text-gray-900 block w-full p-2.5", @id = "car_license", @maxlength = "50" })
                </div>
                <div class="col-span-1">
                    <label for="status" class="d-block mb-2">สถานะ</label>
                    @Html.TextBoxFor(x => x.status, new { @class = "border text-gray-900 block w-full p-2.5", @id = "status", @maxlength = "50", @required = true, @disabled = "disabled", @readonly = true })
                </div>
                @if (Model.mode == Constants.Mode.Created)
                {
                    <div class="col-span-1">
                        <label for="supplier_code" class="d-block mb-2">ผู้ส่ง</label>
                        @Html.DropDownListFor(x => x.supplier_code, SelectListMethods.GetSupplier(), Constants.SelectOption.SelectOne,
                        new
                        {
                            @class = "bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 select2",
                            @id = "supplier_code",
                            @required = true
                        })
                </div>
                                }
                else
                {
                    <div class="col-span-1">
                        <label for="supplier_code" class="d-block mb-2">ผู้ส่ง</label>
                        @Html.DropDownListFor(x => x.supplier_code, SelectListMethods.GetSupplier(Model.supplier_code), Constants.SelectOption.SelectOne,
                        new
                        {
                            @class = "bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500",
                            @id = "supplier_code",
                            @required = true
                        })
                </div>
                                }
                @if (Model.mode == Constants.Mode.Created)
                {
                    <div class="col-span-1">
                        <label for="item_code" class="d-block mb-2">สินค้า</label>
                        @Html.DropDownListFor(x => x.item_code, SelectListMethods.GetItemMaster(), Constants.SelectOption.SelectOne,
                        new
                        {
                            @class = "bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 select2",
                            @id = "item_code",
                            @required = true,
                            @onchange = "CheckQtyPending()"
                        })
                </div>
                                }
                else
                {
                    <div class="col-span-1">
                        <label for="item_code" class="d-block mb-2">สินค้า</label>
                        @Html.DropDownListFor(x => x.item_code, SelectListMethods.GetItemMaster(Model.item_code), Constants.SelectOption.SelectOne,
                        new
                        {
                            @class = "bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500",
                            @id = "item_code",
                            @required = true,
                            @onchange = "CheckQtyPending()"
                        })
                </div>
                                }
                @if (Model.mode == Constants.Mode.Created)
                {
                    <div class="col-span-1">
                        <label for="sender_id" class="d-block mb-2">ผู้ส่งสินค้า</label>
                        @Html.DropDownListFor(x => x.sender_id, SelectListMethods.GetSender(), Constants.SelectOption.SelectOne,
                        new
                        {
                            @class = "bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 select2",
                            @id = "sender_id",
                            @required = true
                        })
                </div>
                                }
                else
                {
                    <div class="col-span-1">
                        <label for="sender_id" class="d-block mb-2">ผู้ส่งสินค้า</label>
                        @Html.DropDownListFor(x => x.sender_id, SelectListMethods.GetSender(Model.sender_id), Constants.SelectOption.SelectOne,
                        new
                        {
                            @class = "bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500",
                            @id = "sender_id",
                            @required = true
                        })
                </div>
                                }
                <div class="col-span-1">
                    <label for="doc_send" class="d-block mb-2">ใบอนุญาตขนแร่</label>
                    @Html.TextBoxFor(x => x.doc_send, new { @class = "border text-gray-900 block w-full p-2.5", @id = "doc_send", @maxlength = "50" })
                </div>
                <div class="col-span-1">
                    <label for="doc_start" class="d-block mb-2">วันที่เริ่มต้น</label>
                    @Html.TextBoxFor(x => x.doc_start, new { @class = "border text-gray-900 block w-full p-2.5", @id = "doc_start", @maxlength = "50", @required = true, @disabled = "disabled", @readonly = true })
                </div>
                <div class="col-span-1">
                    <label for="doc_stop" class="d-block mb-2">วันที่สิ้นสุด</label>
                    @Html.TextBoxFor(x => x.doc_stop, new { @class = "border text-gray-900 block w-full p-2.5", @id = "doc_stop", @maxlength = "50", @required = true, @disabled = "disabled", @readonly = true })
                </div>
            </div>
            <div class="flex flex-row items-center justify-center">
                @if (Model.mode == Constants.Mode.Updated && !String.IsNullOrEmpty(@ViewBag.edit) && @ViewBag.edit == "Y")
                {
                    <button type="button" id="btnRealSave" onclick="Save();" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 mr-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">บันทึก</button>
                }
                @if (Model.status != "Complete")
                {
                    <button type="button" id="btnRealCancel" onclick="CancelWeightIn();" class="text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 mr-2 dark:bg-red-600 dark:hover:bg-red-700 focus:outline-none dark:focus:ring-red-800">ยกเลิกใบชั่งเข้า</button>
                }
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        $("#weight_in").on('blur change input', function () {
            $(this).val(function (i, input) {
                input = input.replace(/\D/g, '');
                return (input / 100).toFixed(2);
            });
        }).trigger('blur');

        function Save() {
            var validFormMain = ValidateFormMain();
            if (validFormMain) {
                RealSaveInfo();
            }
        }

        function ValidateFormMain() {
            if (!$('#formMainWH')[0].checkValidity()) {
                Swal.fire({
                    title: 'คำเตือน',
                    text: 'กรุณากรอกข้อมูลให้ครบถ้วน !',
                    icon: 'error',
                    showCancelButton: false,
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: 'ตกลง',
                    confirmButtonClass: 'd-none d-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                    buttonsStyling: false,
                })
                return false;
            } else {
                return true;
            }
        }

        function RealSaveInfo() {
            var formData = $('#formMainWH').serialize();
            Swal.fire({
                title: 'ยืนยันการบันทึกข้อมูล ?',
                text: '',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'ยืนยัน',
                cancelButtonText: 'ยกเลิก',
                confirmButtonClass: 'd-none d-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                cancelButtonClass: 'd-none d-sm-inline-block btn btn-sm btn-outline-danger shadow-sm ml-1',
                buttonsStyling: false,
            }).then(function (result) {
                if (result.value) {
                    $.ajax({
                        cache: false,
                        async: true,
                        type: "POST",
                        url: '@Url.Action("SaveWeightInInfo", "WeightIn")',
                        data: formData,
                        success: function (data) {
                            if (data.status == '@Constants.Result.Success') {
                                var timerInterval
                                Swal.fire({
                                    title: 'บันทึกสำเร็จ !',
                                    html: 'I will close in <strong></strong> seconds.',
                                    timer: 750,
                                    icon: "success",
                                    showCancelButton: false, // There won't be any cancel button
                                    showConfirmButton: false, // There won't be any confirm button
                                    buttonsStyling: false,
                                    onBeforeOpen: function () {
                                        Swal.showLoading()
                                        timerInterval = setInterval(function () {
                                            Swal.getContent().querySelector('strong')
                                                .textContent = Swal.getTimerLeft()
                                        }, 100)
                                    },
                                    onClose: function () {
                                        clearInterval(timerInterval)
                                    }
                                }).then(function (result) {
                                    if (
                                        // Read more about handling dismissals
                                        result.dismiss === Swal.DismissReason.timer
                                    ) {
                                        console.log('หน้าต่างจะปิดในเวลา')
                                        GoToIndex();
                                    }
                                })
                            } else if (data.status == '@Constants.Result.Invalid') {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'คำเตือน',
                                    text: data.message,
                                    showCancelButton: false,
                                    confirmButtonColor: '#3085d6',
                                    confirmButtonText: 'ตกลง',
                                    confirmButtonClass: 'd-none d-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                                    buttonsStyling: false,
                                })
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'คำเตือน',
                                    text: data.message,
                                    showCancelButton: false,
                                    confirmButtonColor: '#3085d6',
                                    confirmButtonText: 'ตกลง',
                                    confirmButtonClass: 'd-none d-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                                    buttonsStyling: false,
                                })
                                toastr['error']('Fail - ' + data.message, 'Warning!', ErrOpt);
                            }
                        },
                        error: function (err) {
                            toastr['error']('Fail', 'Warning!', ErrOpt);
                        },
                        complete: function (data) {
                        }
                    });
                }
            })
        }

        function CancelWeightIn() {
                    var formData = $('#formMainWH').serialize();
                    Swal.fire({
                        title: 'ยืนยันยกเลิกใบชั่งเข้า ?',
                        text: '',
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'ยืนยัน',
                        cancelButtonText: 'ยกเลิก',
                        confirmButtonClass: 'd-none d-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                        cancelButtonClass: 'd-none d-sm-inline-block btn btn-sm btn-outline-danger shadow-sm ml-1',
                        buttonsStyling: false,
                    }).then(function (result) {
                        if (result.value) {
                            $.ajax({
                                cache: false,
                                async: true,
                                type: "POST",
                                url: '@Url.Action("SaveWeightInStatus", "WeightIn")',
                                data: formData,
                                success: function (data) {
                                    if (data.status == '@Constants.Result.Success') {
                                        var timerInterval
                                        Swal.fire({
                                            title: 'บันทึกสำเร็จ !',
                                            html: 'I will close in <strong></strong> seconds.',
                                            timer: 750,
                                            icon: "success",
                                            showCancelButton: false, // There won't be any cancel button
                                            showConfirmButton: false, // There won't be any confirm button
                                            buttonsStyling: false,
                                            onBeforeOpen: function () {
                                                Swal.showLoading()
                                                timerInterval = setInterval(function () {
                                                    Swal.getContent().querySelector('strong')
                                                        .textContent = Swal.getTimerLeft()
                                                }, 100)
                                            },
                                            onClose: function () {
                                                clearInterval(timerInterval)
                                            }
                                        }).then(function (result) {
                                            if (
                                                // Read more about handling dismissals
                                                result.dismiss === Swal.DismissReason.timer
                                            ) {
                                                console.log('หน้าต่างจะปิดในเวลา')
                                                GoToIndex();
                                            }
                                        })
                                    } else if (data.status == '@Constants.Result.Invalid') {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'คำเตือน',
                                            text: data.message,
                                            showCancelButton: false,
                                            confirmButtonColor: '#3085d6',
                                            confirmButtonText: 'ตกลง',
                                            confirmButtonClass: 'd-none d-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                                            buttonsStyling: false,
                                        })
                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'คำเตือน',
                                            text: data.message,
                                            showCancelButton: false,
                                            confirmButtonColor: '#3085d6',
                                            confirmButtonText: 'ตกลง',
                                            confirmButtonClass: 'd-none d-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                                            buttonsStyling: false,
                                        })
                                        toastr['error']('Fail - ' + data.message, 'Warning!', ErrOpt);
                                    }
                                },
                                error: function (err) {
                                    toastr['error']('Fail', 'Warning!', ErrOpt);
                                },
                                complete: function (data) {
                                }
                            });
                        }
                    })
                }

        function GoToIndex() {
            window.location.href = '@Url.Action("Index", "WeightIn")';
        }

        function CheckDocumentPO() {
        if($('#document_po').val() == '-')
        {
            Swal.fire({
                icon: 'success',
                title: 'ตรวจสอบจำนวน Qty Pending สำเร็จ !',
                text: 'รับโดยไม่ระบุ PO',
                showCancelButton: false,
                confirmButtonColor: '#3085d6',
                confirmButtonText: 'ตกลง',
                confirmButtonClass: 'd-none d-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                buttonsStyling: false,
            })
            $('#btnRealSave').removeClass("d-none");
        }

        $.ajax({
                        cache: false,
                        async: true,
                        type: "POST",
                        url: '@Url.Action("DocumentPOInfo", "DocumentPO")',
                        data: {
                            purchase_number : $('#document_po').val(),
                        },
                        success: function (data) {
                        $('#item_code').val(data.data.material_code).trigger('change');
                        $('#supplier_code').val(data.data.vender_code).trigger('change');
                        $('#line_number').val(data.data.num_of_rec);
                        if (data.status == '@Constants.Result.Success' && data.data.dlv_complete != 'X' && data.data.status != 'L') {

                                    var timerInterval
                            Swal.fire({
                                title: 'ค้นหาเอกสาร PO สำเร็จ !',
                                html: 'I will close in <strong></strong> seconds.',
                                timer: 750,
                                icon: "success",
                                showCancelButton: false, // There won't be any cancel button
                                showConfirmButton: false, // There won't be any confirm button
                                buttonsStyling: false,
                                onBeforeOpen: function () {
                                Swal.showLoading()
                                    timerInterval = setInterval(function () {
                                    Swal.getContent().querySelector('strong')
                                        .textContent = Swal.getTimerLeft()
                                    }, 100)
                                },
                                onClose: function () {
                                    clearInterval(timerInterval)
                                }
                                }).then(function (result) {
                                    if (
                                        // Read more about handling dismissals
                                        result.dismiss === Swal.DismissReason.timer
                                    ) {
                                        console.log('หน้าต่างจะปิดในเวลา')
                                    }
                                    })
                        CheckQtyPending();
                        } else if (data.status == '@Constants.Result.Invalid') {
                                Swal.fire({
                                                icon: 'error',
                                                title: 'คำเตือน',
                                                text: data.message,
                                                showCancelButton: false,
                                                confirmButtonColor: '#3085d6',
                                                confirmButtonText: 'ตกลง',
                                                confirmButtonClass: 'd-none d-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                                                buttonsStyling: false,
                                })
                        } else {
                                Swal.fire({
                                                icon: 'error',
                                                title: 'คำเตือน',
                                                text: 'Data not Found',
                                                showCancelButton: false,
                                                confirmButtonColor: '#3085d6',
                                                confirmButtonText: 'ตกลง',
                                                confirmButtonClass: 'd-none d-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                                                buttonsStyling: false,
                                })
                                toastr['error']('Fail - ' + data.message, 'Warning!', ErrOpt);
                        }
                    },
                    error: function (err) {
                        toastr['error']('Fail', 'Warning!', ErrOpt);
                    },
                    complete: function (data) {
                    }
                    });
                }

        function CheckQtyPending() {
            $.ajax({
                        cache: false,
                        async: true,
                        type: "POST",
                        url: '@Url.Action("CheckQtyPendingDocumentPO", "DocumentPO")',
                        data: {
                            document_po : $('#document_po').val(),
                            material_code : $('#item_code').val(),
                            line_number : $('#line_number').val(),
                        },
                        success: function (data) {
                        var message = '';

                        data.message.forEach(function(item) {
                            message += item + '<br>';
                        });
                        if (data.status == '@Constants.Result.Success' && data.message.length <= 2) {
                                Swal.fire({
                                                icon: 'success',
                                                title: 'ตรวจสอบ Qty Pending สำเร็จ !',
                                                html: message,
                                                showCancelButton: false,
                                                confirmButtonColor: '#3085d6',
                                                confirmButtonText: 'ตกลง',
                                                confirmButtonClass: 'd-none d-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                                                buttonsStyling: false,
                                })
                        $('#btnRealSave').removeClass("d-none");
                        } else if (data.status == '@Constants.Result.Invalid') {
                                Swal.fire({
                                                icon: 'error',
                                                title: 'คำเตือน',
                                                html: message,
                                                showCancelButton: false,
                                                confirmButtonColor: '#3085d6',
                                                confirmButtonText: 'ตกลง',
                                                confirmButtonClass: 'd-none d-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                                                buttonsStyling: false,
                                })
                        $('#btnRealSave').addClass("d-none");
                        } else {
                                Swal.fire({
                                                icon: 'error',
                                                title: 'คำเตือน',
                                                html: message,
                                                showCancelButton: false,
                                                confirmButtonColor: '#3085d6',
                                                confirmButtonText: 'ตกลง',
                                                confirmButtonClass: 'd-none d-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                                                buttonsStyling: false,
                                })
                                $('#btnRealSave').addClass("d-none");
                                toastr['error']('Fail - ' + data.message, 'Warning!', ErrOpt);
                        }
                    },
                    error: function (err) {
                        toastr['error']('Fail', 'Warning!', ErrOpt);
                    },
                    complete: function (data) {
                    }
            });
        }
    </script>
}