@using WeightScaleGen2.BGC.Web.Common;
@model WeightScaleGen2.BGC.Models.ViewModels.ItemMasterRelation.ResultGetItemMasterRelationInfoViewModel;
@{
    ViewData["PageTitle"] = @ViewBag.MenuName;
}
@Html.AntiForgeryToken()
<div class="h-100">
    @* Header Section *@
    <div class="pageMenuTitle">
        @if (Model.mode == Constants.Mode.Created)
        {
            <h3 class="text-black">เพิ่มความสัมพันธ์สินค้า ผู้ส่ง</h3>
        }
        else
        {
            <h3 class="text-black">แก้ไขความสัมพันธ์สินค้า ผู้ส่ง<br />: @Model.item_name</h3>
        }
    </div>

    <div id="dataContainerHeight" class="dataContainer">

        <div class="flex flex-row items-center justify-start mb-3">
            <div>
                <button type="button" onclick="GoToIndex();" class="buttonAction primary-bg inline-flex items-center mr-3">
                    <lord-icon src="https://cdn.lordicon.com/jzzzcrxv.json" trigger="hover" stroke="bold" colors="primary:#ffffff,secondary:#ffffff" style="width:20px;height:20px" class="mr-2"></lord-icon>
                    กลับ
                </button>
            </div>
            @if (Model.mode == Constants.Mode.Created)
            {
                <h4 class="dataTitle">เพิ่มความสัมพันธ์สินค้า ผู้ส่ง</h4>
            }
            else
            {
                <h4 class="dataTitle">แก้ไขความสัมพันธ์สินค้า ผู้ส่ง<br />: @Model.item_name</h4>
            }
        </div>

        <form id="formMainItmR" class="needs-validation" novalidate>
            @Html.HiddenFor(x => x.mode, new { @id = "mode" })
            @Html.HiddenFor(x => x.id, new { @id = "id" })
            @Html.HiddenFor(x => x.item_code, new { @id = "item_code" })
            @Html.HiddenFor(x => x.supplier_code, new { @id = "supplier_code" })
            <div class="space-y-4">
                @if (Model.mode == Constants.Mode.Created)
                {
                    <div class="">
                        <label for="item_code" class="d-block mb-2">Item Master</label>
                        @Html.DropDownListFor(x => x.item_code, SelectListMethods.GetItemMaster(), Constants.SelectOption.SelectOne,
                        new
                        {
                            @class = "border text-gray-900 block w-full p-2.5 select2",
                            @id = "item_code",
                            @required = true
                        })
                </div>
                                }
                else
                {
                    <div class="">
                        <label for="item_code" class="d-block mb-2">Item Master</label>
                        @Html.DropDownListFor(x => x.item_code, SelectListMethods.GetItemMaster(Model.item_code), Constants.SelectOption.SelectOne,
                        new
                        {
                            @class = "border text-gray-900 block w-full p-2.5",
                            @id = "item_code",
                            @required = true,
                            @disabled = "disabled",
                            @readonly = true
                        })
                </div>
                                }
                @if (Model.mode == Constants.Mode.Created)
                {
                    <div class="">
                        <label for="supplier_code" class="d-block mb-2">Supplier</label>
                        @Html.DropDownListFor(x => x.supplier_code, SelectListMethods.GetSupplier(), Constants.SelectOption.SelectOne,
                        new
                        {
                            @class = "border text-gray-900 block w-full p-2.5 select2",
                            @id = "supplier_code",
                            @required = true
                        })
                </div>
                                }
                else
                {
                    <div class="">
                        <label for="supplier_code" class="d-block mb-2">Supplier</label>
                        @Html.DropDownListFor(x => x.supplier_code, SelectListMethods.GetSupplier(Model.supplier_code), Constants.SelectOption.SelectOne,
                        new
                        {
                            @class = "border text-gray-900 block w-full p-2.5",
                            @id = "supplier_code",
                            @required = true,
                            @disabled = "disabled",
                            @readonly = true
                        })
                </div>
                                }
                <div class="">
                    <label for="humidity" class="d-block mb-2">Humidity</label>
                    @Html.TextBoxFor(x => x.humidity, new { @class = "border text-gray-900 block w-full p-2.5", @id = "humidity", @maxlength = "50", @required = true })
                </div>
                <div class="">
                    <label for="gravity" class="d-block mb-2">Gravity</label>
                    @Html.TextBoxFor(x => x.gravity, new { @class = "border text-gray-900 block w-full p-2.5", @id = "gravity", @maxlength = "50", @required = true })
                </div>
                <div class="">
                    <label for="remark_1" class="d-block mb-2">Remark</label>
                    @Html.TextBoxFor(x => x.remark_1, new { @class = "border text-gray-900 block w-full p-2.5", @id = "remark_1", @maxlength = "50" })
                </div>
                <div class="">
                    <label for="remark_2" class="d-block mb-2">Remark Other</label>
                    @Html.TextBoxFor(x => x.remark_2, new { @class = "border text-gray-900 block w-full p-2.5", @id = "remark_2", @maxlength = "50" })
                </div>
            </div>

            <div class="flex justify-content-center mt-12 mb-6">
                @if (Model.mode == Constants.Mode.Created)
                {
                    <button type="button" id="btnRealSave" onclick="Save();" class="buttonAction w-150px primary-bg inline-flex justify-content-center items-center">เพิ่ม</button>
                }
                else
                {
                    <button type="button" id="btnRealSave" onclick="Save();" class="buttonAction w-150px primary-bg inline-flex justify-content-center items-center">บันทึก</button>
                }
            </div>

        </form>
    </div>
</div>

@section Scripts {
    <script>
        $("#humidity").on('blur change input', function () {
            $(this).val(function (i, input) {
                input = input.replace(/\D/g, '');
                return (input / 100).toFixed(2);
            });
        }).trigger('blur');

        $("#gravity").on('blur change input', function () {
            $(this).val(function (i, input) {
                input = input.replace(/\D/g, '');
                return (input / 100).toFixed(2);
            });
        }).trigger('blur');

        function Save() {
            var validFormMain = ValidateFormMain();
            if (validFormMain) {
                RealSaveInfo();
            }
        }

        function ValidateFormMain() {
            if (!$('#formMainItmR')[0].checkValidity()) {
                Swal.fire({
                    title: 'คำเตือน',
                    text: 'กรุณากรอกข้อมูลให้ครบถ้วน !',
                    icon: 'error',
                    showCancelButton: false,
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: 'ตกลง',
                    confirmButtonClass: 'd-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                    buttonsStyling: false,
                })
                return false;
            } else {
                return true;
            }
        }

        function RealSaveInfo() {
            var formData = $('#formMainItmR').serialize();
            Swal.fire({
                title: 'ยืนยันการบันทึกข้อมูล ?',
                text: '',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'ยืนยัน',
                cancelButtonText: 'ยกเลิก',
                confirmButtonClass: 'd-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                cancelButtonClass: 'd-sm-inline-block btn btn-sm btn-outline-danger shadow-sm',
                buttonsStyling: false,
            }).then(function (result) {
                if (result.value) {
                    $.ajax({
                        cache: false,
                        async: true,
                        type: "POST",
                        url: '@Url.Action("SaveItemMasterRelationInfo", "ItemMasterRelation")',
                        data: formData,
                        success: function (data) {
                            if (data.status == '@Constants.Result.Success') {
                                var timerInterval
                                Swal.fire({
                                    title: 'บันทึกสำเร็จ !',
                                    html: 'I will close in <strong></strong> seconds.',
                                    timer: 750,
                                    icon: "success",
                                    showCancelButton: false, // There won't be any cancel button
                                    showConfirmButton: false, // There won't be any confirm button
                                    buttonsStyling: false,
                                    onBeforeOpen: function () {
                                        Swal.showLoading()
                                        timerInterval = setInterval(function () {
                                            Swal.getContent().querySelector('strong')
                                                .textContent = Swal.getTimerLeft()
                                        }, 100)
                                    },
                                    onClose: function () {
                                        clearInterval(timerInterval)
                                    }
                                }).then(function (result) {
                                    if (
                                        // Read more about handling dismissals
                                        result.dismiss === Swal.DismissReason.timer
                                    ) {
                                        console.log('หน้าต่างจะปิดในเวลา')
                                        GoToIndex();
                                    }
                                })
                            } else if (data.status == '@Constants.Result.Invalid') {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'คำเตือน',
                                    text: data.message,
                                    showCancelButton: false,
                                    confirmButtonColor: '#3085d6',
                                    confirmButtonText: 'ตกลง',
                                    confirmButtonClass: 'd-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                                    buttonsStyling: false,
                                })
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'คำเตือน',
                                    text: data.message,
                                    showCancelButton: false,
                                    confirmButtonColor: '#3085d6',
                                    confirmButtonText: 'ตกลง',
                                    confirmButtonClass: 'd-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                                    buttonsStyling: false,
                                })
                                toastr['error']('Fail - ' + data.message, 'Warning!', ErrOpt);
                            }
                        },
                        error: function (err) {
                            toastr['error']('Fail', 'Warning!', ErrOpt);
                        },
                        complete: function (data) {
                        }
                    });
                }
            })
        }

        function GoToIndex() {
            window.location.href = '@Url.Action("Index", "ItemMasterRelation")';
        }
    </script>
}