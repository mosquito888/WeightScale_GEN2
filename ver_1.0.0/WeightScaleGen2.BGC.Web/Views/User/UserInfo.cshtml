@using WeightScaleGen2.BGC.Web.Common;
@model WeightScaleGen2.BGC.Models.ViewModels.User.ResultGetUserInfo
@{
    ViewData["PageTitle"] = @ViewBag.MenuName;
}
@Html.AntiForgeryToken()
@Html.HiddenFor(x => x.user_id, new { @id = "hdfUserId" })
<div class="h-100">
    @* Header Section *@
    <div class="pageMenuTitle">
        <h3 class="text-black">แก้ไขข้อมูลผู้ใช้งาน<br />: @Model.name</h3>
    </div>

    <div id="dataContainerHeight" class="dataContainer">

        <div class="flex flex-row items-center justify-start mb-3">
            <div>
                <button type="button" onclick="GoToIndex();" class="buttonAction primary-bg inline-flex items-center mr-3">
                    <lord-icon src="https://cdn.lordicon.com/jzzzcrxv.json" trigger="hover" stroke="bold" colors="primary:#ffffff,secondary:#ffffff" style="width:20px;height:20px" class="mr-2"></lord-icon>
                    กลับ
                </button>
            </div>
            <h4 class="dataTitle">แก้ไขข้อมูลผู้ใช้งาน<br />: @Model.name</h4>       
        </div>

        <form id="formUserInfo" class="needs-validation" novalidate>
            <div class="space-y-4">
                <div class="">
                    <label for="inputName" class="d-block mb-2">Name</label>
                    @Html.TextBoxFor(x => x.name, new { @class = "border text-gray-900 block w-full p-2.5", @id = "inputName", @maxlength = "50", @required = true, @disabled = "disabled" })
                </div>
                <div class="">
                    <label for="inputEmail" class="d-block mb-2">Email</label>
                    @Html.TextBoxFor(x => x.email, new { @class = "border text-gray-900 block w-full p-2.5", @id = "inputEmail", @maxlength = "50", @required = true, @disabled = "disabled" })
                </div>
                <div class="">
                    <label for="inputRole" class="d-block mb-2">Role</label>
                    @Html.DropDownListFor(x => x.role_id,
                    Model.role_dll.Select(s => new SelectListItem()
                    {
                        Text = s.text,
                        Value = s.value,
                        Disabled = !s.is_active
                    }), Constants.SelectOption.SelectOne, new { @class = "border text-gray-900 block w-full p-2.5", id = "inputRoleId", @required = true })
                </div>
                <div class="">
                    <label for="inputRole" class="d-block mb-2">Employee Code</label>
                    @Html.DropDownListFor(x => x.emp_code, SelectListMethods.GetEmpCreatedName(Model.emp_code), Constants.SelectOption.SelectOne,
                    new {
                        @class="border text-gray-900 block w-full p-2.5 select2",
                        @id="inputEmpCode",
                        @required=true
                    })
                </div>
            </div>

            <div class="flex justify-content-center mt-12 mb-6">
                <button type="button" id="btnRealSave" onclick="Save()" class="buttonAction w-150px primary-bg inline-flex justify-content-center items-center">
                    บันทึก
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>

        function ValidateForm() {
            if (!$('#formUserInfo')[0].checkValidity()) {
                Swal.fire({
                    title: 'คำเตือน',
                    text: 'กรุณากรอกข้อมูลให้ครบถ้วน !',
                    icon: 'error',
                    showCancelButton: false,
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: 'ตกลง',
                    confirmButtonClass: 'd-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                    buttonsStyling: false,
                })
                return false;
            } else {
                return true;
            }
        }

        function Save() {
            var resValidateForm = ValidateForm();
            if (resValidateForm) {
                RealSaveUserInfo();
            }
        }

        function RealSaveUserInfo() {
            var hdfUserId = $("#hdfUserId");
            var ddlRole = $("#inputRoleId");
            var empCode = $("#inputEmpCode");;
            var param = {};
            console.log(hdfUserId.val());
            param.user_id = hdfUserId.val();
            param.role_id = ddlRole.val();
            param.emp_code = empCode.val();
            console.log(param);
            $.ajax({
                type: "POST",
                url: '@Url.Action("UpdateUser", "User")',
                data: param,
                success: function (data) {
                    if (data.status == '@Constants.Result.Success') {
                        var timerInterval
                        Swal.fire({
                            title: 'บันทึกสำเร็จ !',
                            html: 'I will close in <strong></strong> seconds.',
                            timer: 750,
                            icon: "success",
                            showCancelButton: false, // There won't be any cancel button
                            showConfirmButton: false, // There won't be any confirm button
                            buttonsStyling: false,
                            onBeforeOpen: function () {
                                Swal.showLoading()
                                timerInterval = setInterval(function () {
                                    Swal.getContent().querySelector('strong')
                                        .textContent = Swal.getTimerLeft()
                                }, 100)
                            },
                            onClose: function () {
                                clearInterval(timerInterval)
                            }
                        }).then(function (result) {
                            if (
                                // Read more about handling dismissals
                                result.dismiss === Swal.DismissReason.timer
                            ) {
                                console.log('หน้าต่างจะปิดในเวลา')
                                GoToIndex();
                            }
                        })
                    } else if (data.status == '@Constants.Result.Invalid') {
                        Swal.fire({
                            icon: 'error',
                            title: 'คำเตือน',
                            text: data.message,
                            showCancelButton: false,
                            confirmButtonColor: '#3085d6',
                            confirmButtonText: 'ตกลง',
                            confirmButtonClass: 'd-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                            buttonsStyling: false,
                        })
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'คำเตือน',
                            text: data.message,
                            showCancelButton: false,
                            confirmButtonColor: '#3085d6',
                            confirmButtonText: 'ตกลง',
                            confirmButtonClass: 'd-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                            buttonsStyling: false,
                        })
                        toastr['error']('Fail - ' + data.message, 'Warning!', ErrOpt);
                    }
                },
                error: function (err) {
                    toastr['error']('Fail', 'Warning!', ErrOpt);
                },
                complete: function (data) {

                }
            });
        }

        function GoToIndex() {
            window.location.href = '@Url.Action("UserManagement","User")';
        }

    </script>
}