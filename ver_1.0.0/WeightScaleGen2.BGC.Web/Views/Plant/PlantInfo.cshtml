@using WeightScaleGen2.BGC.Web.Common;
@model WeightScaleGen2.BGC.Models.ViewModels.Plant.ResultGetPlantInfoViewModel;
@{
    ViewData["PageTitle"] = @ViewBag.MenuName;
}
@Html.AntiForgeryToken()
<div class="h-100">
    @* Header Section *@
    <div class="pageMenuTitle">
        @if (Model.mode == Constants.Mode.Created)
        {
            <h3 class="text-black">เพิ่ม Plant</h3>
        }
        else
        {
            <h3 class="text-black">แก้ไขข้อมูล Plant<br />: @Model.name_th</h3>
        }
    </div>

    <div id="dataContainerHeight" class="dataContainer">
        <div class="flex flex-row items-center justify-start mb-3">
            <div>
                <button type="button" onclick="GoToIndex();" class="buttonAction primary-bg inline-flex items-center mr-3">
                    <lord-icon src="https://cdn.lordicon.com/jzzzcrxv.json" trigger="hover" stroke="bold" colors="primary:#ffffff,secondary:#ffffff" style="width:20px;height:20px" class="mr-2"></lord-icon>
                    กลับ
                </button>
            </div>
            @if (Model.mode == Constants.Mode.Created)
            {
                <h4 class="dataTitle">เพิ่ม Plant</h4>
            }
            else
            {
                <h4 class="dataTitle">แก้ไขข้อมูล Plant<br />: @Model.name_th</h4>
            }
        </div>
        <form id="formModal" class="needs-validation" novalidate>
            @Html.HiddenFor(x => x.mode, new { @id = "mode" })
            <div class="space-y-4">
                <div class="">
                    @if (Model.mode == Constants.Mode.Created)
                    {
                        <label for="comp_code" class="d-block mb-2">Company</label>
                        @Html.DropDownListFor(x => x.comp_code, SelectListMethods.GetCompanyCode(), Constants.SelectOption.SelectOne,
                        new
                        {
                            @class = "border text-gray-900 block w-full p-2.5",
                            @id = "comp_code",
                            @required = true
                        })
                                        }
                    else
                    {
                        <label for="comp_code" class="d-block mb-2">Company</label>
                        @Html.DropDownListFor(x => x.comp_code, SelectListMethods.GetCompanyCode(Model.comp_code), Constants.SelectOption.SelectOne,
                        new
                        {
                            @class = "border text-gray-900 block w-full p-2.5",
                            @id = "comp_code",
                            @required = true
                        })
                                        }
                </div>
                <div class="">
                    @if (Model.mode == Constants.Mode.Created)
                    {
                        <label for="plant_code" class="d-block mb-2">Plant Code</label>
                        @Html.TextBoxFor(x => x.plant_code, new { @class = "border text-gray-900 block w-full p-2.5", @id = "plant_code", @maxlength = "50", @required = true })
                    }
                    else
                    {
                        <label for="plant_code" class="d-block mb-2">Plant Code</label>
                        @Html.TextBoxFor(x => x.plant_code, new { @class = "border text-gray-900 block w-full p-2.5", @id = "plant_code", @maxlength = "50", @required = true, @readonly = true })
                    }
                </div>
                <div class="">
                    <label for="short_code" class="d-block mb-2">Plant Short Code</label>
                    @Html.TextBoxFor(x => x.short_code, new { @class = "border text-gray-900 block w-full p-2.5", @id = "short_code", @maxlength = "255", @required = true })
                </div>
                <div class="">
                    <label for="name_th" class="d-block mb-2">Plant Name (Thai)</label>
                    @Html.TextBoxFor(x => x.name_th, new { @class = "border text-gray-900 block w-full p-2.5", @id = "name_th", @maxlength = "255", @required = true })
                </div>
                <div class="">
                    <label for="name_en" class="d-block mb-2">Plant Name (English)</label>
                    @Html.TextBoxFor(x => x.name_en, new { @class = "border text-gray-900 block w-full p-2.5", @id = "name_en", @maxlength = "255", @required = true })
                </div>
                <div class="">
                    <label for="head_report" class="d-block mb-2">Head Print Document</label>
                    @Html.TextBoxFor(x => x.head_report, new { @class = "border text-gray-900 block w-full p-2.5", @id = "head_report", @maxlength = "255", @required = true })
                </div>
            </div>

            <div class="flex justify-content-center mt-12 mb-6">
                @if (Model.mode == Constants.Mode.Created)
                {
                    <button type="button" id="btnRealSave" onclick="Save();" class="buttonAction w-150px primary-bg inline-flex justify-content-center items-center">เพิ่ม</button>
                }
                else
                {
                    <button type="button" id="btnRealSave" onclick="Save();" class="buttonAction w-150px primary-bg inline-flex justify-content-center items-center">บันทึก</button>
                }
            </div>

        </form>
    </div>
</div>

<script>

    function Save() {
        var validFormMain = ValidateFormMain();
        if (validFormMain) {
            RealSave();
        }
    }

    function ValidateFormMain() {
        if (!$('#formModal')[0].checkValidity()) {
            document.getElementsByClassName('needs-validation').formModal.classList.add('was-validated');
            Swal.fire({
                title: 'คำเตือน',
                text: 'กรุณากรอกข้อมูลให้ครบถ้วน !',
                icon: 'error',
                showCancelButton: false,
                confirmButtonColor: '#3085d6',
                confirmButtonText: 'ตกลง',
                confirmButtonClass: 'd-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                buttonsStyling: false,
            })
            return false;
        } else {
            return true;
        }
    }

    function RealSave() {
        var formData = $('#formModal').serialize();
        Swal.fire({
            title: 'ยืนยันการบันทึกข้อมูล ?',
            text: '',
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'ยืนยัน',
            cancelButtonText: 'ยกเลิก',
            confirmButtonClass: 'd-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
            cancelButtonClass: 'd-sm-inline-block btn btn-sm btn-outline-danger shadow-sm',
            buttonsStyling: false,
        }).then(function (result) {
            if (result.value) {
                $.ajax({
                    cache: false,
                    async: true,
                    type: "POST",
                    url: '@Url.Action("SaveItem", "Plant")',
                    data: formData,
                    success: function (data) {
                        if (data.status == '@Constants.Result.Success') {
                            var timerInterval
                            Swal.fire({
                                title: 'บันทึกสำเร็จ !',
                                html: 'I will close in <strong></strong> seconds.',
                                timer: 750,
                                icon: "success",
                                showCancelButton: false, // There won't be any cancel button
                                showConfirmButton: false, // There won't be any confirm button
                                buttonsStyling: false,
                                onBeforeOpen: function () {
                                    Swal.showLoading()
                                    timerInterval = setInterval(function () {
                                        Swal.getContent().querySelector('strong')
                                            .textContent = Swal.getTimerLeft()
                                    }, 100)
                                },
                                onClose: function () {
                                    clearInterval(timerInterval)
                                }
                            }).then(function (result) {
                                if (
                                    // Read more about handling dismissals
                                    result.dismiss === Swal.DismissReason.timer
                                ) {
                                    console.log('หน้าต่างจะปิดในเวลา')
                                    GoToIndex();
                                }
                            })
                        } else if (data.status == '@Constants.Result.Invalid') {
                            Swal.fire({
                                icon: 'error',
                                title: 'คำเตือน',
                                text: data.message,
                                showCancelButton: false,
                                confirmButtonColor: '#3085d6',
                                confirmButtonText: 'ตกลง',
                                confirmButtonClass: 'd-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                                buttonsStyling: false,
                            })
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'คำเตือน',
                                text: data.message,
                                showCancelButton: false,
                                confirmButtonColor: '#3085d6',
                                confirmButtonText: 'ตกลง',
                                confirmButtonClass: 'd-sm-inline-block btn btn-sm btn-outline-primary shadow-sm',
                                buttonsStyling: false,
                            })
                            toastr['error']('Fail - ' + data.message, 'Warning!', ErrOpt);
                        }
                    },
                    error: function (err) {
                        toastr['error']('Fail', 'Warning!', ErrOpt);
                    },
                    complete: function (data) {
                    }
                });
            }
        })
    }

    function GoToIndex() {
        window.location.href = '@Url.Action("Index", "Plant")';
    }

</script>